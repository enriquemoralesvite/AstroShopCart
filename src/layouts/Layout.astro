---
import './src/styles/global.css'
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Mi Tienda</title>
	</head>
	<body>
		<Header />
		<main class="flex-1">
			
			<slot />
		  </main>
		<Footer />

		<script is:inline>
			// Función para actualizar la UI del carrito
			window.updateCartUI = function() {
				const cartItems = JSON.parse(localStorage.getItem('cart') || '[]');
				const cartContainer = document.getElementById('cart-items');
				const cartTotal = document.getElementById('cart-total');
				const cartBadge = document.getElementById('cart-badge');
				
				// Actualizar badge
				if (cartBadge) {
					cartBadge.textContent = cartItems.length.toString();
					cartBadge.classList.toggle('hidden', cartItems.length === 0);
				}

				// Actualizar contenedor del carrito si existe
				if (cartContainer && cartTotal) {
					if (cartItems.length === 0) {
						cartContainer.innerHTML = '<p class="text-gray-500 text-center py-4">Tu carrito está vacío</p>';
						cartTotal.textContent = '$0.00';
						return;
					}

					const total = cartItems.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0);
					
					cartContainer.innerHTML = cartItems.map(item => `
						<div class="flex items-center gap-4 py-4">
							<img src="${item.image}" alt="${item.name}" class="w-16 h-16 object-cover rounded">
							<div class="flex-1 min-w-0">
								<h4 class="font-semibold truncate">${item.name}</h4>
								<div class="flex items-center gap-2 mt-1">
									<button onclick="updateQuantity('${item.id}', -1)" class="px-2 py-1 bg-gray-100 rounded hover:bg-gray-200 transition-colors">−</button>
									<span class="w-8 text-center">${item.quantity || 1}</span>
									<button onclick="updateQuantity('${item.id}', 1)" class="px-2 py-1 bg-gray-100 rounded hover:bg-gray-200 transition-colors">+</button>
									<span class="ml-2">$${(item.price * (item.quantity || 1)).toFixed(2)}</span>
								</div>
							</div>
							<button onclick="removeFromCart('${item.id}')" class="text-red-500 hover:text-red-700 transition-colors">×</button>
						</div>
					`).join('');

					cartTotal.textContent = `$${total.toFixed(2)}`;
				}
			}

			// Función para eliminar un item del carrito
			window.removeFromCart = function(id) {
				try {
					const cart = JSON.parse(localStorage.getItem('cart') || '[]');
					const updatedCart = cart.filter(item => item.id !== id);
					localStorage.setItem('cart', JSON.stringify(updatedCart));
					
					window.updateCartUI();
					window.dispatchEvent(new CustomEvent('cartUpdated'));
					
					// Mostrar notificación
					const notification = document.createElement('div');
					notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
					notification.textContent = 'Producto eliminado del carrito';
					document.body.appendChild(notification);
					
					setTimeout(() => notification.remove(), 3000);
				} catch (error) {
					console.error('Error al eliminar del carrito:', error);
				}
			}

			// Función para actualizar cantidad
			window.updateQuantity = function(id, change) {
				const cart = JSON.parse(localStorage.getItem('cart') || '[]');
				const itemIndex = cart.findIndex(item => item.id === id);
				
				if (itemIndex !== -1) {
					const currentQuantity = cart[itemIndex].quantity || 1;
					const newQuantity = currentQuantity + change;
					
					if (newQuantity <= 0) {
						if (confirm('¿Deseas eliminar este producto del carrito?')) {
							cart.splice(itemIndex, 1);
						} else {
							return;
						}
					} else {
						cart[itemIndex].quantity = newQuantity;
					}
					
					localStorage.setItem('cart', JSON.stringify(cart));
					window.updateCartUI();
					window.dispatchEvent(new CustomEvent('cartUpdated'));
				}
			}

			// Función para agregar al carrito
			window.addToCart = function(item) {
				const cart = JSON.parse(localStorage.getItem('cart') || '[]');
				cart.push({...item, quantity: 1});
				localStorage.setItem('cart', JSON.stringify(cart));
				
				window.updateCartUI();
				window.dispatchEvent(new CustomEvent('cartUpdated'));
				
				// Mostrar notificación
				const notification = document.createElement('div');
				notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
				notification.textContent = 'Producto añadido al carrito';
				document.body.appendChild(notification);
				
				setTimeout(() => notification.remove(), 3000);
			}

			// Inicializar el carrito cuando se carga la página
			document.addEventListener('DOMContentLoaded', window.updateCartUI);
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
