---
interface CartItem {
    id: string;
    name: string;
    price: number;
    image: string;
    quantity?: number;
}

declare global {
    interface Window {
        updateQuantity: (id: string, change: number) => void;
        removeFromCart: (id: string) => void;
        updateCartUI: () => void;
    }
}
---

<div id="cart-preview" class="hidden absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-lg p-4 z-[100]">
    <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold">Tu Carrito (<span id="cart-preview-count">0</span>)</h3>
        <button id="close-cart" class="text-gray-500 hover:text-gray-700 transition-colors">×</button>
    </div>
    
    <div id="cart-items" class="max-h-96 overflow-y-auto divide-y divide-gray-200">
        <!-- Items will be inserted here -->
    </div>

    <div class="border-t mt-4 pt-4">
        <div class="flex justify-between mb-4">
            <span class="font-semibold">Total</span>
            <span id="cart-total" class="font-semibold">$0.00</span>
        </div>
        <div class="space-y-2">
            <a href="/canasta" class="block w-full bg-black text-white px-4 py-2 rounded text-center hover:bg-gray-800 transition-colors">
                Ver Carrito
            </a>
            <button id="clear-cart" class="block w-full bg-red-300 text-white px-4 py-2 rounded text-center hover:bg-red-600 transition-colors">
                Vaciar Carrito
            </button>
        </div>
    </div>
</div>

<script>
    interface CartItem {
        id: string;
        name: string;
        price: number;
        image: string;
        quantity?: number;
    }

    // Función para actualizar la UI del carrito
    window.updateCartUI = function() {
        const cartItems = JSON.parse(localStorage.getItem('cart') || '[]') as CartItem[];
        const cartContainer = document.getElementById('cart-items');
        const cartTotal = document.getElementById('cart-total');
        const cartBadge = document.getElementById('cart-badge');
        const cartPreviewCount = document.getElementById('cart-preview-count');
        
        // Actualizar contadores
        if (cartBadge && cartPreviewCount) {
            const itemCount = cartItems.length;
            cartBadge.textContent = itemCount.toString();
            cartPreviewCount.textContent = itemCount.toString();
            cartBadge.classList.toggle('hidden', itemCount === 0);
        }

        // Actualizar contenido del carrito
        if (cartContainer && cartTotal) {
            if (cartItems.length === 0) {
                cartContainer.innerHTML = '<p class="text-gray-500 text-center py-4">Tu carrito está vacío</p>';
                cartTotal.textContent = '$0.00';
                return;
            }

            const total = cartItems.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0);
            
            cartContainer.innerHTML = cartItems.map(item => `
                <div class="flex items-center gap-4 py-4">
                    <img src="${item.image}" alt="${item.name}" class="w-16 h-16 object-cover rounded">
                    <div class="flex-1 min-w-0">
                        <h4 class="font-semibold truncate">${item.name}</h4>
                        <div class="flex items-center gap-2 mt-1">
                            <button onclick="window.updateQuantity('${item.id}', -1)" class="px-2 py-1 bg-gray-100 rounded hover:bg-gray-200 transition-colors">−</button>
                            <span class="w-8 text-center">${item.quantity || 1}</span>
                            <button onclick="window.updateQuantity('${item.id}', 1)" class="px-2 py-1 bg-gray-100 rounded hover:bg-gray-200 transition-colors">+</button>
                            <span class="ml-2">$${(item.price * (item.quantity || 1)).toFixed(2)}</span>
                        </div>
                    </div>
                    <button onclick="window.removeFromCart('${item.id}')" class="text-gray-400 hover:text-red-400 p-2 rounded transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
                        </svg>
                    </button>
                </div>
            `).join('');

            cartTotal.textContent = `$${total.toFixed(2)}`;
        }
    }

    // Función para actualizar cantidad
    window.updateQuantity = function(id: string, change: number) {
        const cart = JSON.parse(localStorage.getItem('cart') || '[]') as CartItem[];
        const itemIndex = cart.findIndex((item: CartItem) => item.id === id);
        
        if (itemIndex !== -1) {
            const currentQuantity = cart[itemIndex].quantity || 1;
            const newQuantity = currentQuantity + change;
            
            if (newQuantity <= 0) {
                cart.splice(itemIndex, 1);
            } else {
                cart[itemIndex].quantity = newQuantity;
            }
            
            localStorage.setItem('cart', JSON.stringify(cart));
            window.updateCartUI();
            window.dispatchEvent(new CustomEvent('cartUpdated'));
        }
    }

    // Función para eliminar del carrito
    window.removeFromCart = function(id: string) {
        const cart = JSON.parse(localStorage.getItem('cart') || '[]') as CartItem[];
        const updatedCart = cart.filter((item: CartItem) => item.id !== id);
        localStorage.setItem('cart', JSON.stringify(updatedCart));
        window.updateCartUI();
        window.dispatchEvent(new CustomEvent('cartUpdated'));
    }

    // Inicializar
    document.addEventListener('DOMContentLoaded', () => {
        window.updateCartUI();
        
        // Cerrar el carrito al hacer clic en el botón de cerrar
        document.getElementById('close-cart')?.addEventListener('click', () => {
            document.getElementById('cart-preview')?.classList.add('hidden');
        });
    });

    // Actualizar cuando cambie el almacenamiento o se dispare el evento cartUpdated
    window.addEventListener('storage', () => window.updateCartUI());
    window.addEventListener('cartUpdated', window.updateCartUI);
</script>

<style>
    /* Eliminando estilos personalizados ya que usamos Tailwind */
</style> 