---
import Layout from "../layouts/Layout.astro";

interface CartItem {
  id: string;
  name: string;
  price: number;
  image: string;
  quantity?: number;
}

declare global {
  interface Window {
    updateQuantity: (id: string, change: number) => void;
    removeFromCart: (id: string) => void;
    updateCartUI: () => void;
    clearCart: () => void;
  }
}
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-8">Tu Carrito</h1>

    <!-- Popup de confirmación -->
    <div
      id="confirm-popup"
      class="fixed top-0 left-1/2 transform -translate-x-1/2 mt-4 hidden z-50"
    >
      <div class="bg-white p-4 rounded shadow-lg">
        <p class="mb-4">
          ¿Estás seguro que desea vaciar el carrito de compras?
        </p>
        <div class="flex justify-end gap-2">
          <button
            id="cancel-clear"
            class="px-4 py-1 border border-gray-300 rounded">Cancelar</button
          >
          <button
            id="confirm-clear"
            class="px-4 py-1 bg-blue-500 text-white rounded">Aceptar</button
          >
        </div>
      </div>
    </div>

    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Lista de productos -->
      <div class="lg:w-2/3">
        <div class="bg-white rounded-lg shadow overflow-x-auto">
          <div class="p-4 border-b">
            <h2 class="text-lg font-semibold">Productos en el Carrito</h2>
          </div>
          <table class="w-full">
            <thead>
              <tr class="border-b bg-gray-50">
                <th class="text-left p-4">Producto</th>
                <th class="text-center p-4">Cantidad</th>
                <th class="text-right p-4">Precio Unitario</th>
                <th class="text-right p-4">Total</th>
                <th class="p-4"></th>
              </tr>
            </thead>
            <tbody id="cart-items">
              <!-- Los items se cargarán dinámicamente -->
            </tbody>
            <tfoot id="cart-details" class="bg-gray-50">
              <!-- El detalle se cargará dinámicamente -->
            </tfoot>
          </table>
        </div>
      </div>

      <!-- Resumen del pedido -->
      <div class="lg:w-1/3">
        <div class="bg-white p-6 rounded-lg shadow">
          <h2 class="text-lg font-semibold mb-4">Resumen del Pedido</h2>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span>Subtotal</span>
              <span id="subtotal">$0.00</span>
            </div>
            <div class="flex justify-between text-gray-600">
              <span>Envío</span>
              <span>Gratis</span>
            </div>
            <div
              class="flex justify-between font-semibold text-lg pt-3 border-t"
            >
              <span>Total</span>
              <span id="total">$0.00</span>
            </div>
          </div>
          <a
            href="/formulario"
            id="checkout-button"
            class="block w-full mt-6 bg-black text-white py-3 rounded hover:bg-gray-800 transition-colors flex items-center justify-center gap-2 text-center"
          >
            Proceder al Pago
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z"
                clip-rule="evenodd"></path>
            </svg>
          </a>

          <button
            id="clear-cart"
            class="w-full mt-4 bg-red-300 text-white py-3 rounded hover:bg-red-600 transition-colors text-center"
            onclick="window.clearCart()"
          >
            Vaciar Carrito
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  interface CartItem {
    id: string;
    name: string;
    price: number;
    image: string;
    quantity?: number;
  }

  function updateCart() {
    const cart = JSON.parse(localStorage.getItem("cart") || "[]") as CartItem[];
    const cartContainer = document.getElementById("cart-items");
    const cartDetails = document.getElementById("cart-details");
    const subtotalElement = document.getElementById("subtotal");
    const totalElement = document.getElementById("total");
    const checkoutButton = document.getElementById("checkout-button");

    if (
      !cartContainer ||
      !cartDetails ||
      !subtotalElement ||
      !totalElement ||
      !checkoutButton
    ) {
      console.error("No se encontraron elementos necesarios del DOM");
      return;
    }

    if (cart.length === 0) {
      cartContainer.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-8">
                        <p class="text-gray-500 mb-4">Tu carrito está vacío</p>
                        <a href="/" class="text-blue-600 hover:underline">Continuar Comprando</a>
                    </td>
                </tr>
            `;
      cartDetails.innerHTML = "";
      subtotalElement.textContent = "$0.00";
      totalElement.textContent = "$0.00";
      return;
    }

    let subtotal = 0;
    // Actualizar tabla principal
    cartContainer.innerHTML = cart
      .map((item: CartItem) => {
        const itemTotal = item.price * (item.quantity || 1);
        subtotal += itemTotal;
        return `
                <tr class="border-b hover:bg-gray-50" data-item-id="${item.id}">
                    <td class="p-4">
                        <div class="flex items-center gap-4">
                            <img src="${item.image}" alt="${item.name}" class="w-16 h-16 object-cover rounded">
                            <div>
                                <h3 class="font-medium">${item.name}</h3>
                            </div>
                        </div>
                    </td>
                    <td class="p-4">
                        <div class="flex items-center justify-center gap-2">
                            <button onclick="window.updateQuantity('${item.id}', -1)" class="w-8 h-8 rounded border hover:bg-gray-100">−</button>
                            <span class="w-8 text-center">${item.quantity || 1}</span>
                            <button onclick="window.updateQuantity('${item.id}', 1)" class="w-8 h-8 rounded border hover:bg-gray-100">+</button>
                        </div>
                    </td>
                    <td class="p-4 text-right text-gray-500">$${item.price.toFixed(2)}</td>
                    <td class="p-4 text-right font-medium">$${itemTotal.toFixed(2)}</td>
                    <td class="p-4 text-right">
                        <button onclick="window.removeFromCart('${item.id}')" class="text-red-500 hover:text-red-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                            </svg>
                        </button>
                    </td>
                </tr>
            `;
      })
      .join("");

    // Actualizar detalle
    cartDetails.innerHTML = `
            ${cart
              .map(
                (item) => `
                <tr class="border-b hover:bg-gray-50">
                    <td class="p-4">
                        <div class="flex items-center gap-4">
                            <div>
                                <h3 class="font-medium">${item.name}</h3>
                            </div>
                        </div>
                    </td>
                    <td class="p-4 text-center text-gray-600">${item.quantity || 1}</td>
                    <td class="p-4 text-right text-gray-500">$${item.price.toFixed(2)}</td>
                    <td class="p-4 text-right font-medium">$${(item.price * (item.quantity || 1)).toFixed(2)}</td>
                    <td></td>
                </tr>
            `
              )
              .join("")}
            <tr class="bg-gray-50 font-semibold">
                <td colspan="2" class="p-4 text-left">Total</td>
                <td class="p-4 text-right"></td>
                <td class="p-4 text-right">$${subtotal.toFixed(2)}</td>
                <td></td>
            </tr>
        `;

    subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
    totalElement.textContent = `$${subtotal.toFixed(2)}`;

    checkoutButton.removeAttribute("disabled");
    checkoutButton.classList.remove("opacity-50", "cursor-not-allowed");
  }

  // Declarar las funciones en el objeto window
  window.updateQuantity = function (id: string, change: number) {
    const cart = JSON.parse(localStorage.getItem("cart") || "[]") as CartItem[];
    const itemIndex = cart.findIndex((item) => item.id === id);

    if (itemIndex !== -1) {
      const currentQuantity = cart[itemIndex].quantity || 1;
      const newQuantity = currentQuantity + change;

      if (newQuantity <= 0) {
        cart.splice(itemIndex, 1);
      } else {
        cart[itemIndex].quantity = newQuantity;
      }

      localStorage.setItem("cart", JSON.stringify(cart));
      updateCart();
      window.dispatchEvent(new CustomEvent("cartUpdated"));
    }
  };

  window.removeFromCart = function (id: string) {
    const cart = JSON.parse(localStorage.getItem("cart") || "[]") as CartItem[];
    const updatedCart = cart.filter((item) => item.id !== id);
    localStorage.setItem("cart", JSON.stringify(updatedCart));
    updateCart();
    window.dispatchEvent(new CustomEvent("cartUpdated"));
  };

  // Función para mostrar/ocultar el popup
  function togglePopup(show: boolean) {
    const popup = document.getElementById("confirm-popup");
    if (popup) {
      popup.classList.toggle("hidden", !show);
    }
  }

  // Función para vaciar el carrito
  window.clearCart = function () {
    const cart = JSON.parse(localStorage.getItem("cart") || "[]");
    if (cart.length === 0) {
      return; // No hacer nada si el carrito está vacío
    }

    togglePopup(true);
  };

  // Inicializar el carrito cuando se carga la página
  document.addEventListener("DOMContentLoaded", () => {
    updateCart();
    window.updateCartUI?.(); // Actualizar también el preview si existe

    // Añadir eventos a los botones del popup
    const confirmButton = document.getElementById("confirm-clear");
    const cancelButton = document.getElementById("cancel-clear");

    if (confirmButton) {
      confirmButton.addEventListener("click", () => {
        localStorage.setItem("cart", JSON.stringify([]));
        updateCart();
        window.dispatchEvent(new CustomEvent("cartUpdated"));
        togglePopup(false);
      });
    }

    if (cancelButton) {
      cancelButton.addEventListener("click", () => {
        togglePopup(false);
      });
    }
  });
</script>

